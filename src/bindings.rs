// Generated by `wit-bindgen` 0.41.0. DO NOT EDIT!
// Options used:
//   * runtime_path: "wit_bindgen_rt"
pub type Message = promptrs::core::types::Message;
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_prune_cabi<T: Guest>(
    arg0: *mut u8,
    arg1: usize,
    arg2: i64,
) -> *mut u8 {
    #[cfg(target_arch = "wasm32")] _rt::run_ctors_once();
    let base23 = arg0;
    let len23 = arg1;
    let mut result23 = _rt::Vec::with_capacity(len23);
    for i in 0..len23 {
        let base = base23.add(i * (5 * ::core::mem::size_of::<*const u8>()));
        let e23 = {
            let l0 = i32::from(*base.add(0).cast::<u8>());
            use promptrs::core::types::Message as V22;
            let v22 = match l0 {
                0 => {
                    let e22 = {
                        let l1 = *base
                            .add(::core::mem::size_of::<*const u8>())
                            .cast::<*mut u8>();
                        let l2 = *base
                            .add(2 * ::core::mem::size_of::<*const u8>())
                            .cast::<usize>();
                        let len3 = l2;
                        let bytes3 = _rt::Vec::from_raw_parts(l1.cast(), len3, len3);
                        _rt::string_lift(bytes3)
                    };
                    V22::System(e22)
                }
                1 => {
                    let e22 = {
                        let l4 = *base
                            .add(::core::mem::size_of::<*const u8>())
                            .cast::<*mut u8>();
                        let l5 = *base
                            .add(2 * ::core::mem::size_of::<*const u8>())
                            .cast::<usize>();
                        let len6 = l5;
                        let bytes6 = _rt::Vec::from_raw_parts(l4.cast(), len6, len6);
                        _rt::string_lift(bytes6)
                    };
                    V22::User(e22)
                }
                2 => {
                    let e22 = {
                        let l7 = *base
                            .add(::core::mem::size_of::<*const u8>())
                            .cast::<*mut u8>();
                        let l8 = *base
                            .add(2 * ::core::mem::size_of::<*const u8>())
                            .cast::<usize>();
                        let len9 = l8;
                        let bytes9 = _rt::Vec::from_raw_parts(l7.cast(), len9, len9);
                        _rt::string_lift(bytes9)
                    };
                    V22::Assistant(e22)
                }
                3 => {
                    let e22 = {
                        let l10 = *base
                            .add(::core::mem::size_of::<*const u8>())
                            .cast::<*mut u8>();
                        let l11 = *base
                            .add(2 * ::core::mem::size_of::<*const u8>())
                            .cast::<usize>();
                        let len12 = l11;
                        let bytes12 = _rt::Vec::from_raw_parts(l10.cast(), len12, len12);
                        let l13 = *base
                            .add(3 * ::core::mem::size_of::<*const u8>())
                            .cast::<*mut u8>();
                        let l14 = *base
                            .add(4 * ::core::mem::size_of::<*const u8>())
                            .cast::<usize>();
                        let len15 = l14;
                        let bytes15 = _rt::Vec::from_raw_parts(l13.cast(), len15, len15);
                        (_rt::string_lift(bytes12), _rt::string_lift(bytes15))
                    };
                    V22::ToolCall(e22)
                }
                n => {
                    debug_assert_eq!(n, 4, "invalid enum discriminant");
                    let e22 = {
                        let l16 = *base
                            .add(::core::mem::size_of::<*const u8>())
                            .cast::<*mut u8>();
                        let l17 = *base
                            .add(2 * ::core::mem::size_of::<*const u8>())
                            .cast::<usize>();
                        let len18 = l17;
                        let bytes18 = _rt::Vec::from_raw_parts(l16.cast(), len18, len18);
                        let l19 = *base
                            .add(3 * ::core::mem::size_of::<*const u8>())
                            .cast::<*mut u8>();
                        let l20 = *base
                            .add(4 * ::core::mem::size_of::<*const u8>())
                            .cast::<usize>();
                        let len21 = l20;
                        let bytes21 = _rt::Vec::from_raw_parts(l19.cast(), len21, len21);
                        (_rt::string_lift(bytes18), _rt::string_lift(bytes21))
                    };
                    V22::Status(e22)
                }
            };
            v22
        };
        result23.push(e23);
    }
    _rt::cabi_dealloc(
        base23,
        len23 * (5 * ::core::mem::size_of::<*const u8>()),
        ::core::mem::size_of::<*const u8>(),
    );
    let result24 = T::prune(result23, arg2 as u64);
    let ptr25 = (&raw mut _RET_AREA.0).cast::<u8>();
    let vec36 = result24;
    let len36 = vec36.len();
    let layout36 = _rt::alloc::Layout::from_size_align_unchecked(
        vec36.len() * (5 * ::core::mem::size_of::<*const u8>()),
        ::core::mem::size_of::<*const u8>(),
    );
    let result36 = if layout36.size() != 0 {
        let ptr = _rt::alloc::alloc(layout36).cast::<u8>();
        if ptr.is_null() {
            _rt::alloc::handle_alloc_error(layout36);
        }
        ptr
    } else {
        ::core::ptr::null_mut()
    };
    for (i, e) in vec36.into_iter().enumerate() {
        let base = result36.add(i * (5 * ::core::mem::size_of::<*const u8>()));
        {
            use promptrs::core::types::Message as V35;
            match e {
                V35::System(e) => {
                    *base.add(0).cast::<u8>() = (0i32) as u8;
                    let vec26 = (e.into_bytes()).into_boxed_slice();
                    let ptr26 = vec26.as_ptr().cast::<u8>();
                    let len26 = vec26.len();
                    ::core::mem::forget(vec26);
                    *base.add(2 * ::core::mem::size_of::<*const u8>()).cast::<usize>() = len26;
                    *base.add(::core::mem::size_of::<*const u8>()).cast::<*mut u8>() = ptr26
                        .cast_mut();
                }
                V35::User(e) => {
                    *base.add(0).cast::<u8>() = (1i32) as u8;
                    let vec27 = (e.into_bytes()).into_boxed_slice();
                    let ptr27 = vec27.as_ptr().cast::<u8>();
                    let len27 = vec27.len();
                    ::core::mem::forget(vec27);
                    *base.add(2 * ::core::mem::size_of::<*const u8>()).cast::<usize>() = len27;
                    *base.add(::core::mem::size_of::<*const u8>()).cast::<*mut u8>() = ptr27
                        .cast_mut();
                }
                V35::Assistant(e) => {
                    *base.add(0).cast::<u8>() = (2i32) as u8;
                    let vec28 = (e.into_bytes()).into_boxed_slice();
                    let ptr28 = vec28.as_ptr().cast::<u8>();
                    let len28 = vec28.len();
                    ::core::mem::forget(vec28);
                    *base.add(2 * ::core::mem::size_of::<*const u8>()).cast::<usize>() = len28;
                    *base.add(::core::mem::size_of::<*const u8>()).cast::<*mut u8>() = ptr28
                        .cast_mut();
                }
                V35::ToolCall(e) => {
                    *base.add(0).cast::<u8>() = (3i32) as u8;
                    let (t29_0, t29_1) = e;
                    let vec30 = (t29_0.into_bytes()).into_boxed_slice();
                    let ptr30 = vec30.as_ptr().cast::<u8>();
                    let len30 = vec30.len();
                    ::core::mem::forget(vec30);
                    *base.add(2 * ::core::mem::size_of::<*const u8>()).cast::<usize>() = len30;
                    *base.add(::core::mem::size_of::<*const u8>()).cast::<*mut u8>() = ptr30
                        .cast_mut();
                    let vec31 = (t29_1.into_bytes()).into_boxed_slice();
                    let ptr31 = vec31.as_ptr().cast::<u8>();
                    let len31 = vec31.len();
                    ::core::mem::forget(vec31);
                    *base.add(4 * ::core::mem::size_of::<*const u8>()).cast::<usize>() = len31;
                    *base
                        .add(3 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>() = ptr31.cast_mut();
                }
                V35::Status(e) => {
                    *base.add(0).cast::<u8>() = (4i32) as u8;
                    let (t32_0, t32_1) = e;
                    let vec33 = (t32_0.into_bytes()).into_boxed_slice();
                    let ptr33 = vec33.as_ptr().cast::<u8>();
                    let len33 = vec33.len();
                    ::core::mem::forget(vec33);
                    *base.add(2 * ::core::mem::size_of::<*const u8>()).cast::<usize>() = len33;
                    *base.add(::core::mem::size_of::<*const u8>()).cast::<*mut u8>() = ptr33
                        .cast_mut();
                    let vec34 = (t32_1.into_bytes()).into_boxed_slice();
                    let ptr34 = vec34.as_ptr().cast::<u8>();
                    let len34 = vec34.len();
                    ::core::mem::forget(vec34);
                    *base.add(4 * ::core::mem::size_of::<*const u8>()).cast::<usize>() = len34;
                    *base
                        .add(3 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>() = ptr34.cast_mut();
                }
            }
        }
    }
    *ptr25.add(::core::mem::size_of::<*const u8>()).cast::<usize>() = len36;
    *ptr25.add(0).cast::<*mut u8>() = result36;
    ptr25
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn __post_return_prune<T: Guest>(arg0: *mut u8) {
    let l0 = *arg0.add(0).cast::<*mut u8>();
    let l1 = *arg0.add(::core::mem::size_of::<*const u8>()).cast::<usize>();
    let base17 = l0;
    let len17 = l1;
    for i in 0..len17 {
        let base = base17.add(i * (5 * ::core::mem::size_of::<*const u8>()));
        {
            let l2 = i32::from(*base.add(0).cast::<u8>());
            match l2 {
                0 => {
                    let l3 = *base
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>();
                    let l4 = *base
                        .add(2 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    _rt::cabi_dealloc(l3, l4, 1);
                }
                1 => {
                    let l5 = *base
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>();
                    let l6 = *base
                        .add(2 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    _rt::cabi_dealloc(l5, l6, 1);
                }
                2 => {
                    let l7 = *base
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>();
                    let l8 = *base
                        .add(2 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    _rt::cabi_dealloc(l7, l8, 1);
                }
                3 => {
                    let l9 = *base
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>();
                    let l10 = *base
                        .add(2 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    _rt::cabi_dealloc(l9, l10, 1);
                    let l11 = *base
                        .add(3 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>();
                    let l12 = *base
                        .add(4 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    _rt::cabi_dealloc(l11, l12, 1);
                }
                _ => {
                    let l13 = *base
                        .add(::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>();
                    let l14 = *base
                        .add(2 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    _rt::cabi_dealloc(l13, l14, 1);
                    let l15 = *base
                        .add(3 * ::core::mem::size_of::<*const u8>())
                        .cast::<*mut u8>();
                    let l16 = *base
                        .add(4 * ::core::mem::size_of::<*const u8>())
                        .cast::<usize>();
                    _rt::cabi_dealloc(l15, l16, 1);
                }
            }
        }
    }
    _rt::cabi_dealloc(
        base17,
        len17 * (5 * ::core::mem::size_of::<*const u8>()),
        ::core::mem::size_of::<*const u8>(),
    );
}
pub trait Guest {
    fn prune(messages: _rt::Vec<Message>, size: u64) -> _rt::Vec<Message>;
}
#[doc(hidden)]
macro_rules! __export_world_pruner_cabi {
    ($ty:ident with_types_in $($path_to_types:tt)*) => {
        const _ : () = { #[unsafe (export_name = "prune")] unsafe extern "C" fn
        export_prune(arg0 : * mut u8, arg1 : usize, arg2 : i64,) -> * mut u8 { unsafe {
        $($path_to_types)*:: _export_prune_cabi::<$ty > (arg0, arg1, arg2) } } #[unsafe
        (export_name = "cabi_post_prune")] unsafe extern "C" fn _post_return_prune(arg0 :
        * mut u8,) { unsafe { $($path_to_types)*:: __post_return_prune::<$ty > (arg0) } }
        };
    };
}
#[doc(hidden)]
pub(crate) use __export_world_pruner_cabi;
#[cfg_attr(target_pointer_width = "64", repr(align(8)))]
#[cfg_attr(target_pointer_width = "32", repr(align(4)))]
struct _RetArea([::core::mem::MaybeUninit<u8>; 2 * ::core::mem::size_of::<*const u8>()]);
static mut _RET_AREA: _RetArea = _RetArea(
    [::core::mem::MaybeUninit::uninit(); 2 * ::core::mem::size_of::<*const u8>()],
);
#[rustfmt::skip]
#[allow(dead_code, clippy::all)]
pub mod promptrs {
    pub mod core {
        #[allow(dead_code, async_fn_in_trait, unused_imports, clippy::all)]
        pub mod types {
            #[used]
            #[doc(hidden)]
            static __FORCE_SECTION_REF: fn() = super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[derive(Clone)]
            pub enum Message {
                System(_rt::String),
                User(_rt::String),
                Assistant(_rt::String),
                ToolCall((_rt::String, _rt::String)),
                Status((_rt::String, _rt::String)),
            }
            impl ::core::fmt::Debug for Message {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    match self {
                        Message::System(e) => {
                            f.debug_tuple("Message::System").field(e).finish()
                        }
                        Message::User(e) => {
                            f.debug_tuple("Message::User").field(e).finish()
                        }
                        Message::Assistant(e) => {
                            f.debug_tuple("Message::Assistant").field(e).finish()
                        }
                        Message::ToolCall(e) => {
                            f.debug_tuple("Message::ToolCall").field(e).finish()
                        }
                        Message::Status(e) => {
                            f.debug_tuple("Message::Status").field(e).finish()
                        }
                    }
                }
            }
            #[derive(Clone)]
            pub struct CompletionParams {
                pub model: _rt::String,
                pub temperature: Option<f64>,
                pub top_p: Option<f64>,
                pub messages: _rt::Vec<Message>,
                pub stream: bool,
            }
            impl ::core::fmt::Debug for CompletionParams {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("CompletionParams")
                        .field("model", &self.model)
                        .field("temperature", &self.temperature)
                        .field("top-p", &self.top_p)
                        .field("messages", &self.messages)
                        .field("stream", &self.stream)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct CompletionRequest {
                pub api_key: Option<_rt::String>,
                pub base_url: _rt::String,
                pub body: CompletionParams,
            }
            impl ::core::fmt::Debug for CompletionRequest {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("CompletionRequest")
                        .field("api-key", &self.api_key)
                        .field("base-url", &self.base_url)
                        .field("body", &self.body)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct Property {
                pub type_: _rt::String,
                pub description: _rt::String,
            }
            impl ::core::fmt::Debug for Property {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Property")
                        .field("type", &self.type_)
                        .field("description", &self.description)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct Argument {
                pub description: _rt::String,
                pub properties: _rt::Vec<(_rt::String, Property)>,
            }
            impl ::core::fmt::Debug for Argument {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Argument")
                        .field("description", &self.description)
                        .field("properties", &self.properties)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct Tool {
                pub name: _rt::String,
                pub arguments: _rt::Vec<Argument>,
            }
            impl ::core::fmt::Debug for Tool {
                fn fmt(
                    &self,
                    f: &mut ::core::fmt::Formatter<'_>,
                ) -> ::core::fmt::Result {
                    f.debug_struct("Tool")
                        .field("name", &self.name)
                        .field("arguments", &self.arguments)
                        .finish()
                }
            }
        }
    }
}
#[rustfmt::skip]
mod _rt {
    #![allow(dead_code, clippy::all)]
    pub use alloc_crate::string::String;
    pub use alloc_crate::vec::Vec;
    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr, layout);
    }
    pub use alloc_crate::alloc;
    extern crate alloc as alloc_crate;
}
/// Generates `#[unsafe(no_mangle)]` functions to export the specified type as
/// the root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
macro_rules! __export_pruner_impl {
    ($ty:ident) => {
        self::export!($ty with_types_in self);
    };
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => {
        $($path_to_types_root)*:: __export_world_pruner_cabi!($ty with_types_in
        $($path_to_types_root)*);
    };
}
#[doc(inline)]
pub(crate) use __export_pruner_impl as export;
#[cfg(target_arch = "wasm32")]
#[unsafe(
    link_section = "component-type:wit-bindgen:0.41.0:promptrs:core@0.1.0:pruner:encoded world"
)]
#[doc(hidden)]
#[allow(clippy::octal_escapes)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 580] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xc7\x03\x01A\x02\x01\
A\x07\x01B\x13\x01o\x02ss\x01q\x05\x06system\x01s\0\x04user\x01s\0\x09assistant\x01\
s\0\x09tool-call\x01\0\0\x06status\x01\0\0\x04\0\x07message\x03\0\x01\x01ku\x01p\
\x02\x01r\x05\x05models\x0btemperature\x03\x05top-p\x03\x08messages\x04\x06strea\
m\x7f\x04\0\x11completion-params\x03\0\x05\x01ks\x01r\x03\x07api-key\x07\x08base\
-urls\x04body\x06\x04\0\x12completion-request\x03\0\x08\x01r\x02\x04types\x0bdes\
criptions\x04\0\x08property\x03\0\x0a\x01o\x02s\x0b\x01p\x0c\x01r\x02\x0bdescrip\
tions\x0aproperties\x0d\x04\0\x08argument\x03\0\x0e\x01p\x0f\x01r\x02\x04names\x09\
arguments\x10\x04\0\x04tool\x03\0\x11\x03\0\x19promptrs:core/types@0.1.0\x05\0\x02\
\x03\0\0\x07message\x03\0\x07message\x03\0\x01\x01p\x02\x01@\x02\x08messages\x03\
\x04sizew\0\x03\x04\0\x05prune\x01\x04\x04\0\x1apromptrs:core/pruner@0.1.0\x04\0\
\x0b\x0c\x01\0\x06pruner\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit-\
component\x070.227.1\x10wit-bindgen-rust\x060.41.0";
#[inline(never)]
#[doc(hidden)]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
